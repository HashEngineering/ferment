# [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod types { pub mod ferment_example_traits_nested { use crate as ferment_example_traits_nested ; pub mod model { use crate as ferment_example_traits_nested ; pub mod snapshot { use crate as ferment_example_traits_nested ; # [doc = "FFI-representation of the [`# doc = \"FFI-representation of the [`ferment_example_traits_nested::model::snapshot::LLMQSnapshotSkipMode`]\"`]"] # [repr (C)] # [derive (Clone)] pub enum ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { NoSkipping = 0 , SkipFirst = 1 , SkipExcept = 2 , SkipAll = 3 } impl ferment_interfaces :: FFIConversion < ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode > for ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode) -> ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode { let ffi_ref = & * ffi ; match ffi_ref { ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping => ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: NoSkipping , ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst => ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipFirst , ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept => ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipExcept , ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll => ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipAll } } unsafe fn ffi_to_const (obj : ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode) -> * const ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (match obj { ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: NoSkipping => ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping , ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipFirst => ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst , ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipExcept => ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept , ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshotSkipMode :: SkipAll => ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll }) } unsafe fn destroy (ffi : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl Drop for ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { fn drop (& mut self) { unsafe { match self { ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping => { } , ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst => { } , ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept => { } , ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll => { } } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode_NoSkipping_ctor () -> * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: NoSkipping) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode_SkipFirst_ctor () -> * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipFirst) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode_SkipExcept_ctor () -> * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipExcept) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode_SkipAll_ctor () -> * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { ferment_interfaces :: boxed (ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode :: SkipAll) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode_destroy (ffi : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = "FFI-representation of the [`ferment_example_traits_nested::model::snapshot::LLMQSnapshot`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_model_snapshot_LLMQSnapshot { pub member_list : * mut crate :: fermented :: generics :: Vec_u8 , pub skip_list : * mut crate :: fermented :: generics :: Vec_i32 , pub skip_list_mode : * mut crate :: fermented :: types :: ferment_example_traits_nested :: model :: snapshot :: ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode , pub option_vec : * mut crate :: fermented :: generics :: Vec_u8 } impl ferment_interfaces :: FFIConversion < ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshot > for ferment_example_traits_nested_model_snapshot_LLMQSnapshot { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_nested_model_snapshot_LLMQSnapshot) -> ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshot { let ffi_ref = & * ffi ; ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshot { member_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . member_list) , skip_list : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . skip_list) , skip_list_mode : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . skip_list_mode) , option_vec : ferment_interfaces :: FFIConversion :: ffi_from_opt (ffi_ref . option_vec) } } unsafe fn ffi_to_const (obj : ferment_example_traits_nested :: model :: snapshot :: LLMQSnapshot) -> * const ferment_example_traits_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (ferment_example_traits_nested_model_snapshot_LLMQSnapshot { member_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . member_list) , skip_list : ferment_interfaces :: FFIConversion :: ffi_to (obj . skip_list) , skip_list_mode : ferment_interfaces :: FFIConversion :: ffi_to (obj . skip_list_mode) , option_vec : match obj . option_vec { Some (vec) => ferment_interfaces :: FFIConversion :: ffi_to (vec) , None => std :: ptr :: null_mut () } }) } unsafe fn destroy (ffi : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_nested_model_snapshot_LLMQSnapshot { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . member_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . skip_list) ; ; ferment_interfaces :: unbox_any (ffi_ref . skip_list_mode) ; ; if ! ffi_ref . option_vec . is_null () { ferment_interfaces :: unbox_any (ffi_ref . option_vec) ; } ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_ctor (member_list : * mut crate :: fermented :: generics :: Vec_u8 , skip_list : * mut crate :: fermented :: generics :: Vec_i32 , skip_list_mode : * mut crate :: fermented :: types :: ferment_example_traits_nested :: model :: snapshot :: ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode , option_vec : * mut crate :: fermented :: generics :: Vec_u8) -> * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot { ferment_interfaces :: boxed (ferment_example_traits_nested_model_snapshot_LLMQSnapshot { member_list , skip_list , skip_list_mode , option_vec }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_destroy (ffi : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_get_member_list (obj : * const ferment_example_traits_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . member_list } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_get_skip_list (obj : * const ferment_example_traits_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_i32 { (* obj) . skip_list } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_get_skip_list_mode (obj : * const ferment_example_traits_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: types :: ferment_example_traits_nested :: model :: snapshot :: ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode { (* obj) . skip_list_mode } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_get_option_vec (obj : * const ferment_example_traits_nested_model_snapshot_LLMQSnapshot) -> * mut crate :: fermented :: generics :: Vec_u8 { (* obj) . option_vec } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_set_member_list (obj : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . member_list = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_set_skip_list (obj : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_i32) { (* obj) . skip_list = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_set_skip_list_mode (obj : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: types :: ferment_example_traits_nested :: model :: snapshot :: ferment_example_traits_nested_model_snapshot_LLMQSnapshotSkipMode) { (* obj) . skip_list_mode = value ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_model_snapshot_LLMQSnapshot_set_option_vec (obj : * mut ferment_example_traits_nested_model_snapshot_LLMQSnapshot , value : * mut crate :: fermented :: generics :: Vec_u8) { (* obj) . option_vec = value ; } } } # [doc = "FFI-representation of the [`ferment_example_traits_nested::SomeStruct`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_SomeStruct { pub name : * mut std :: os :: raw :: c_char } impl ferment_interfaces :: FFIConversion < ferment_example_traits_nested :: SomeStruct > for ferment_example_traits_nested_SomeStruct { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_nested_SomeStruct) -> ferment_example_traits_nested :: SomeStruct { let ffi_ref = & * ffi ; ferment_example_traits_nested :: SomeStruct { name : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . name) } } unsafe fn ffi_to_const (obj : ferment_example_traits_nested :: SomeStruct) -> * const ferment_example_traits_nested_SomeStruct { ferment_interfaces :: boxed (ferment_example_traits_nested_SomeStruct { name : ferment_interfaces :: FFIConversion :: ffi_to (obj . name) }) } unsafe fn destroy (ffi : * mut ferment_example_traits_nested_SomeStruct) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_nested_SomeStruct { fn drop (& mut self) { unsafe { let ffi_ref = self ; < std :: os :: raw :: c_char as ferment_interfaces :: FFIConversion < String >> :: destroy (ffi_ref . name) ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_SomeStruct_ctor (name : * mut std :: os :: raw :: c_char) -> * mut ferment_example_traits_nested_SomeStruct { ferment_interfaces :: boxed (ferment_example_traits_nested_SomeStruct { name }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_SomeStruct_destroy (ffi : * mut ferment_example_traits_nested_SomeStruct) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_SomeStruct_get_name (obj : * const ferment_example_traits_nested_SomeStruct) -> * mut std :: os :: raw :: c_char { (* obj) . name } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_SomeStruct_set_name (obj : * mut ferment_example_traits_nested_SomeStruct , value : * mut std :: os :: raw :: c_char) { (* obj) . name = value ; } pub mod some_package { use crate as ferment_example_traits_nested ; # [doc = "FFI-representation of the [`ferment_example_traits_nested::some_package::SomeGenericStruct`]"] # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_some_package_SomeGenericStruct { pub obj : * mut FP } impl < Req FP , > ferment_interfaces :: FFIConversion < ferment_example_traits_nested :: some_package :: SomeGenericStruct > for ferment_example_traits_nested_some_package_SomeGenericStruct where < FP : FromProof < Req > , > { unsafe fn ffi_from_const (ffi : * const ferment_example_traits_nested_some_package_SomeGenericStruct) -> ferment_example_traits_nested :: some_package :: SomeGenericStruct { let ffi_ref = & * ffi ; ferment_example_traits_nested :: some_package :: SomeGenericStruct { obj : ferment_interfaces :: FFIConversion :: ffi_from (ffi_ref . obj) } } unsafe fn ffi_to_const (obj : ferment_example_traits_nested :: some_package :: SomeGenericStruct) -> * const ferment_example_traits_nested_some_package_SomeGenericStruct { ferment_interfaces :: boxed (ferment_example_traits_nested_some_package_SomeGenericStruct { obj : ferment_interfaces :: FFIConversion :: ffi_to (obj . obj) }) } unsafe fn destroy (ffi : * mut ferment_example_traits_nested_some_package_SomeGenericStruct) { ferment_interfaces :: unbox_any (ffi) ; } } impl Drop for ferment_example_traits_nested_some_package_SomeGenericStruct { fn drop (& mut self) { unsafe { let ffi_ref = self ; ferment_interfaces :: unbox_any (ffi_ref . obj) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_some_package_SomeGenericStruct_ctor (obj : * mut FP) -> * mut ferment_example_traits_nested_some_package_SomeGenericStruct { ferment_interfaces :: boxed (ferment_example_traits_nested_some_package_SomeGenericStruct { obj }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_some_package_SomeGenericStruct_destroy (ffi : * mut ferment_example_traits_nested_some_package_SomeGenericStruct) { ferment_interfaces :: unbox_any (ffi) ; } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_some_package_SomeGenericStruct_get_obj (obj : * const ferment_example_traits_nested_some_package_SomeGenericStruct) -> * mut FP { (* obj) . obj } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn ferment_example_traits_nested_some_package_SomeGenericStruct_set_obj (obj : * mut ferment_example_traits_nested_some_package_SomeGenericStruct , value : * mut FP) { (* obj) . obj = value ; } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_some_package_SomeTrait_VTable { } # [repr (C)] # [derive (Clone)] pub struct ferment_example_traits_nested_some_package_SomeTrait { pub object : * const () , pub vtable : * const ferment_example_traits_nested_some_package_SomeTrait_VTable } } } } # [allow (clippy :: let_and_return , clippy :: suspicious_else_formatting , clippy :: redundant_field_names , dead_code , non_camel_case_types , non_snake_case , non_upper_case_globals , redundant_semicolons , unused_braces , unused_imports , unused_unsafe , unused_variables , unused_qualifications)] pub mod generics { # [repr (C)] # [derive (Clone)] pub struct Vec_u8 { pub count : usize , pub values : * mut u8 } impl ferment_interfaces :: FFIConversion < Vec < u8 > > for Vec_u8 { unsafe fn ffi_from_const (ffi : * const Vec_u8) -> Vec < u8 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < u8 >) -> * const Vec_u8 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_u8 { type Value = Vec < u8 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj) }) } } impl Drop for Vec_u8 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Vec_u8_ctor (count : usize , values : * mut u8) -> * mut Vec_u8 { ferment_interfaces :: boxed (Vec_u8 { count , values }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Vec_u8_destroy (ffi : * mut Vec_u8) { ferment_interfaces :: unbox_any (ffi) ; } # [repr (C)] # [derive (Clone)] pub struct Vec_i32 { pub count : usize , pub values : * mut i32 } impl ferment_interfaces :: FFIConversion < Vec < i32 > > for Vec_i32 { unsafe fn ffi_from_const (ffi : * const Vec_i32) -> Vec < i32 > { ferment_interfaces :: FFIVecConversion :: decode (& * ffi) } unsafe fn ffi_to_const (obj : Vec < i32 >) -> * const Vec_i32 { ferment_interfaces :: FFIVecConversion :: encode (obj) } unsafe fn destroy (ffi : * mut Vec_i32) { ferment_interfaces :: unbox_any (ffi) ; ; } } impl ferment_interfaces :: FFIVecConversion for Vec_i32 { type Value = Vec < i32 > ; unsafe fn decode (& self) -> Self :: Value { ferment_interfaces :: from_primitive_vec (self . values , self . count) } unsafe fn encode (obj : Self :: Value) -> * mut Self { ferment_interfaces :: boxed (Self { count : obj . len () , values : ferment_interfaces :: boxed_vec (obj) }) } } impl Drop for Vec_i32 { fn drop (& mut self) { unsafe { ferment_interfaces :: unbox_vec_ptr (self . values , self . count) ; ; } } } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Vec_i32_ctor (count : usize , values : * mut i32) -> * mut Vec_i32 { ferment_interfaces :: boxed (Vec_i32 { count , values }) } # [doc = r" # Safety"] # [no_mangle] pub unsafe extern "C" fn Vec_i32_destroy (ffi : * mut Vec_i32) { ferment_interfaces :: unbox_any (ffi) ; } }