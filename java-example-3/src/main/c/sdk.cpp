/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


extern "C" {
#include "../../../../ferment-example/target/example.h"
}
#include <stdlib.h>
#include "dpp.h"
#include <ctime>

MemoryFactory * MemoryFactory::instance = new MemoryFactory();
MemoryFactory & memoryFactory = *MemoryFactory::getInstance();


#include <stdint.h>		// Use the C99 official header

SWIGINTERN crate_example_mine_VecU8Holder *new_crate_example_mine_VecU8Holder(Vec_u8 *vec_u8){
        return crate_example_mine_VecU8Holder_ctor(vec_u8);
    }
SWIGINTERN void delete_crate_example_mine_VecU8Holder(crate_example_mine_VecU8Holder *self){
        //memoryFactory.destroyItem(self->first->values); //above
        crate_example_mine_VecU8Holder_destroy(self); // causes crash with above, no crash if this is the only line, order doesn't matter
        //memoryFactory.destroyItem(self->first->values); //above
    }
SWIGINTERN crate_example_mine_InnerStruct *new_crate_example_mine_InnerStruct(long a,long b){
        return crate_example_mine_InnerStruct_ctor(a, b);
    }
SWIGINTERN void delete_crate_example_mine_InnerStruct(crate_example_mine_InnerStruct *self){
        crate_example_mine_InnerStruct_destroy(self);
    }
SWIGINTERN crate_example_mine_OuterStruct *new_crate_example_mine_OuterStruct__SWIG_0(crate_example_mine_InnerStruct *is1,crate_example_mine_InnerStruct *is2){
        crate_example_mine_OuterStruct * os = create_outer(is1, is2);
        printf("is1 (%lx)\n", (uint64_t)is1);
        printf("is2 (%lx)\n", (uint64_t)is2);
        printf("os  (%lx)\n", (uint64_t)os);
        printf("os->is1 (%lx)\n", (uint64_t)os->first);
        printf("os->is2 (%lx)\n", (uint64_t)os->second);
        return os;
    }
SWIGINTERN crate_example_mine_OuterStruct *new_crate_example_mine_OuterStruct__SWIG_1(long a,long b,long c,long d){
        crate_example_mine_InnerStruct * is1 = crate_example_mine_InnerStruct_ctor(a, b);
        crate_example_mine_InnerStruct * is2 = crate_example_mine_InnerStruct_ctor(c, d);
        crate_example_mine_OuterStruct * os = crate_example_mine_OuterStruct_ctor(is1, is2);
        printf("is1 (%lx)\n", (uint64_t)is1);
        printf("is2 (%lx)\n", (uint64_t)is2);
        printf("os  (%lx)\n", (uint64_t)os);
        printf("os->is1 (%lx)\n", (uint64_t)os->first);
        printf("os->is2 (%lx)\n", (uint64_t)os->second);
        return os;
    }
SWIGINTERN void delete_crate_example_mine_OuterStruct(crate_example_mine_OuterStruct *self){
        //InnerStruct * first = self->first;
        crate_example_mine_OuterStruct_destroy(self);
        //InnerStruct_destroy(first);
    }
SWIGINTERN crate_identity_identity_KeyID *new_crate_identity_identity_KeyID(int id){
        return crate_identity_identity_KeyID_ctor(id);
    }
SWIGINTERN void delete_crate_identity_identity_KeyID(crate_identity_identity_KeyID *self){
        crate_identity_identity_KeyID_destroy(self);
    }
SWIGINTERN int crate_identity_identity_KeyID_toInt(crate_identity_identity_KeyID *self){
        return self->_0;
    }
SWIGINTERN bool crate_identity_identity_KeyID_objectEquals(crate_identity_identity_KeyID *self,crate_identity_identity_KeyID *other){
        if (self == other) return true;
        if (self == nullptr || other == nullptr) return false;
        return self->_0 == other->_0;
    }
SWIGINTERN crate_nested_IdentifierBytes32 *new_crate_nested_IdentifierBytes32(uint8_t (*identifierBytes)[32]){
        return crate_nested_IdentifierBytes32_ctor(identifierBytes);
    }
SWIGINTERN void delete_crate_nested_IdentifierBytes32(crate_nested_IdentifierBytes32 *self){
        printf("~IdentityBytes32(%lx)\n", (uint64_t)self);
        // memoryFactory.destroyItem(self->_0); // crash
        crate_nested_IdentifierBytes32_destroy(self);
    }
SWIGINTERN crate_nested_Identifier *new_crate_nested_Identifier(uint8_t (*byteArray)[32]){
        crate_nested_IdentifierBytes32 * identifierBytes32 = crate_nested_IdentifierBytes32_ctor(byteArray);
        return crate_nested_Identifier_ctor(identifierBytes32);
    }
SWIGINTERN void delete_crate_nested_Identifier(crate_nested_Identifier *self){
        printf("~Identifier(%lx)\n", self);
        //memoryFactory.destroyItem(self->_0->_0); //crash
        crate_nested_Identifier_destroy(self);
    }
SWIGINTERN crate_identity_identity_ContractBounds *new_crate_identity_identity_ContractBounds__SWIG_0(crate_nested_Identifier *id){
        crate_identity_identity_ContractBounds * cb = crate_identity_identity_ContractBounds_SingleContract_ctor(Identifier_clone(id));
        printf("ContractBounds: %lx->%lx\n", (unsigned long)cb, cb->single_contract.id);
        return cb;
    }
SWIGINTERN crate_identity_identity_ContractBounds *new_crate_identity_identity_ContractBounds__SWIG_1(crate_nested_Identifier *id,char *document_type){
        return crate_identity_identity_ContractBounds_SingleContractDocumentType_ctor(Identifier_clone(id), memoryFactory.clone(document_type));
    }
SWIGINTERN void delete_crate_identity_identity_ContractBounds(crate_identity_identity_ContractBounds *self){
        printf("~ContractBounds: %lx->%lx\n", (unsigned long)self, self->single_contract.id);
        crate_identity_identity_ContractBounds_destroy(self);
    }
SWIGINTERN crate_nested_BinaryData *new_crate_nested_BinaryData(Vec_u8 *o_0){
        return crate_nested_BinaryData_ctor(o_0);
    }
SWIGINTERN void delete_crate_nested_BinaryData(crate_nested_BinaryData *self){
        printf("~BinaryData(%lx)\n", (uint64_t)self);
        printf("~BinaryData->_0(%lx)\n", (uint64_t)self->_0);

        uint8_t * ptr = self->_0->values;
        // memoryFactory.destroyItem(self->_0->values); // causes BinaryData_destroy crash
        printf("~BinaryData->_0->values(%lx), [0] = %d\n", (uint64_t)self->_0->values, (int)ptr[0]);

        // Vec_u8_destroy(self->_0); // crash
        printf("~BinaryData->_0(%lx)\n", (uint64_t)self->_0);
        crate_nested_BinaryData_destroy(self);
        //printf("~BinaryData complete(%lx)\n", (uint64_t)self);
        //printf("~BinaryData->_0->values[0] = %d\n", (int)ptr[0]);

        //memoryFactory.destroyItem(ptr);
    }
SWIGINTERN crate_identity_identity_TimestampMillis *new_crate_identity_identity_TimestampMillis__SWIG_0(){
        return crate_identity_identity_TimestampMillis_ctor(time(NULL) * 1000);
    }
SWIGINTERN crate_identity_identity_TimestampMillis *new_crate_identity_identity_TimestampMillis__SWIG_1(long long timestamp){
        return crate_identity_identity_TimestampMillis_ctor(timestamp);
    }
SWIGINTERN void delete_crate_identity_identity_TimestampMillis(crate_identity_identity_TimestampMillis *self){
        crate_identity_identity_TimestampMillis_destroy(self);
    }
SWIGINTERN long long crate_identity_identity_TimestampMillis_toLong(crate_identity_identity_TimestampMillis *self){
        return self ? self->_0 : -1;
    }
SWIGINTERN bool crate_identity_identity_TimestampMillis_objectEquals(crate_identity_identity_TimestampMillis *self,crate_identity_identity_TimestampMillis *other){
        if (self == other) return true;
        if (self == nullptr || other == nullptr) return false;
        return self->_0 == other->_0;
    }
SWIGINTERN crate_identity_identity_IdentityPublicKeyV0 *new_crate_identity_identity_IdentityPublicKeyV0(crate_identity_identity_KeyID *keyId,crate_identity_identity_Purpose purpose,crate_identity_identity_SecurityLevel securityLevel,crate_identity_identity_ContractBounds *contract_bounds,crate_identity_identity_KeyType key_type,bool read_only,crate_nested_BinaryData *data,crate_identity_identity_TimestampMillis *disabled_at){

        // enums
        crate_identity_identity_Purpose * purposeObject = intToPurpose(purpose);
        crate_identity_identity_KeyType * keyTypeObject = intToKeyType(key_type);
        crate_identity_identity_SecurityLevel * securityLevelObject = intToSecurityLevel(securityLevel);

        uint8_t * byteArray = (uint8_t*)memoryFactory.alloc(data->_0->count);
        memcpy(byteArray, data->_0->values, data->_0->count);
        Vec_u8 * vec_u8 = Vec_u8_ctor(byteArray, data->_0->count);
        crate_nested_BinaryData * binaryData = crate_nested_BinaryData_ctor(vec_u8);
        printf("  ->data(%lx)\n", (uint64_t)binaryData);
        printf("  ->data->_0(%lx)\n", (uint64_t)binaryData->_0);
        printf("  ->data->_0->values(%lx)\n", (uint64_t)binaryData->_0->values);
        crate_identity_identity_ContractBounds * contract_bounds_copy = nullptr;
        if (contract_bounds != nullptr) {
            if (contract_bounds->tag == crate_identity_identity_ContractBounds_SingleContract) {
                contract_bounds_copy = crate_identity_identity_ContractBounds_SingleContract_ctor(Identifier_clone(contract_bounds->single_contract.id));
            } else if (contract_bounds->tag == crate_identity_identity_ContractBounds_SingleContractDocumentType) {
                char * typeCopy = memoryFactory.clone(contract_bounds->single_contract_document_type.document_type_name);
                contract_bounds_copy = crate_identity_identity_ContractBounds_SingleContractDocumentType_ctor(Identifier_clone(contract_bounds->single_contract_document_type.id), typeCopy);
            }
        }
        printf("  ->contract_bounds(%lx): %d\n", (uint64_t)contract_bounds, contract_bounds != nullptr ? contract_bounds->tag : -1);
        printf("  ->contract_bounds_copy(%lx)\n", (uint64_t)contract_bounds_copy);
        crate_identity_identity_KeyID * keyIdObject = crate_identity_identity_KeyID_ctor(keyId->_0);
        crate_identity_identity_TimestampMillis * disabled_at_copy = disabled_at != nullptr ? crate_identity_identity_TimestampMillis_ctor(disabled_at->_0) : nullptr;
        crate_identity_identity_IdentityPublicKeyV0 * ipkv0 = crate_identity_identity_IdentityPublicKeyV0_ctor(keyIdObject, purposeObject, securityLevelObject,
            contract_bounds_copy,
            keyTypeObject, read_only, binaryData, disabled_at_copy);
        printf("IdentityPublicKeyV0(%lx\n", (uint64_t)ipkv0);
        return ipkv0;
    }
SWIGINTERN void delete_crate_identity_identity_IdentityPublicKeyV0(crate_identity_identity_IdentityPublicKeyV0 *self){
//         printf("~IdentityPublicKeyV0(%lx)\n", (unsigned long)self);
//         printf("  ->purpose(%lx)\n", (uint64_t)self->purpose);
//         printf("  ->data->_0(%lx)\n", (uint64_t)self->data->_0);
//         printf("  ->data->_0->values(%lx)\n", (uint64_t)self->data->_0->values);
//         printf("  ->data(%lx)\n", (uint64_t)self->data);
        crate_identity_identity_IdentityPublicKeyV0_destroy(self); //crash
    }
SWIGINTERN enum crate_identity_identity_KeyType crate_identity_identity_IdentityPublicKeyV0_getKeyType(crate_identity_identity_IdentityPublicKeyV0 *self){
        return *self->key_type;
    }
SWIGINTERN enum crate_identity_identity_Purpose crate_identity_identity_IdentityPublicKeyV0_getPurpose(crate_identity_identity_IdentityPublicKeyV0 *self){
        return *self->purpose;
    }
SWIGINTERN enum crate_identity_identity_SecurityLevel crate_identity_identity_IdentityPublicKeyV0_getSecurityLevel(crate_identity_identity_IdentityPublicKeyV0 *self){
        return *self->security_level;
    }
SWIGINTERN crate_identity_identity_Revision *new_crate_identity_identity_Revision__SWIG_0(){
        return crate_identity_identity_Revision_ctor(0);
    }
SWIGINTERN crate_identity_identity_Revision *new_crate_identity_identity_Revision__SWIG_1(long long timestamp){
        return crate_identity_identity_Revision_ctor(timestamp);
    }
SWIGINTERN void delete_crate_identity_identity_Revision(crate_identity_identity_Revision *self){
        crate_identity_identity_Revision_destroy(self);
    }
SWIGINTERN long long crate_identity_identity_Revision_toLong(crate_identity_identity_Revision *self){
        return self->_0;
    }
SWIGINTERN bool crate_identity_identity_Revision_objectEquals(crate_identity_identity_Revision *self,crate_identity_identity_Revision *other){
        if (self == other) return true;
        if (self == nullptr || other == nullptr) return false;
        return self->_0 == other->_0;
    }
SWIGINTERN void delete_crate_identity_identity_IdentityV0(crate_identity_identity_IdentityV0 *self){
        printf("~IdentityV0(%lx)\n", (uint64_t)self);
        crate_identity_identity_IdentityV0_destroy(self);
    }
SWIGINTERN int crate_identity_identity_IdentityV0_getPublicKeyCount(crate_identity_identity_IdentityV0 *self){
        return self->public_keys->count;
    }
SWIGINTERN crate_identity_identity_IdentityPublicKeyV0 *crate_identity_identity_IdentityV0_getPublicKey(crate_identity_identity_IdentityV0 *self,uint32_t index){
        if (index < self->public_keys->count) {
            return self->public_keys->values[index]->v0;
        } else {
            return NULL;
        }
    }
SWIGINTERN crate_identity_identity_IdentityPublicKeyV0 *crate_identity_identity_IdentityV0_getPublicKeyById(crate_identity_identity_IdentityV0 *self,uint32_t id){
        for (int i = 0; i < self->public_keys->count; ++i) {
            if (self->public_keys->keys[i]->_0 == id)
                return self->public_keys->values[i]->v0;
        }
        return NULL;
    }
SWIGINTERN long long crate_identity_identity_IdentityV0_getBalance(crate_identity_identity_IdentityV0 *self){
        return (long)self->balance;
    }
SWIGINTERN crate_identity_identity_Identity *new_crate_identity_identity_Identity(){
        return get_an_identity();
    }
SWIGINTERN void delete_crate_identity_identity_Identity(crate_identity_identity_Identity *self){
        printf("~Identity(%lx)\n", (uint64_t)self);
        crate_identity_identity_Identity_destroy(self);
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_ECDSA_1SECP256K1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_KeyType result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_KeyType)crate_identity_identity_KeyType_ECDSA_SECP256K1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_BLS12_1381_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_KeyType result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_KeyType)crate_identity_identity_KeyType_BLS12_381;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_ECDSA_1HASH160_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_KeyType result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_KeyType)crate_identity_identity_KeyType_ECDSA_HASH160;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_BIP13_1SCRIPT_1HASH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_KeyType result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_KeyType)crate_identity_identity_KeyType_BIP13_SCRIPT_HASH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_EDDSA_125519_1HASH160_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_KeyType result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_KeyType)crate_identity_identity_KeyType_EDDSA_25519_HASH160;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_AUTHENTICATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Purpose)crate_identity_identity_Purpose_AUTHENTICATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_ENCRYPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Purpose)crate_identity_identity_Purpose_ENCRYPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_DECRYPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Purpose)crate_identity_identity_Purpose_DECRYPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_WITHDRAW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Purpose)crate_identity_identity_Purpose_WITHDRAW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_SYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Purpose)crate_identity_identity_Purpose_SYSTEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_VOTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Purpose)crate_identity_identity_Purpose_VOTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_MASTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_SecurityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_SecurityLevel)crate_identity_identity_SecurityLevel_MASTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_CRITICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_SecurityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_SecurityLevel)crate_identity_identity_SecurityLevel_CRITICAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_SecurityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_SecurityLevel)crate_identity_identity_SecurityLevel_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_MEDIUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  crate_identity_identity_SecurityLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_SecurityLevel)crate_identity_identity_SecurityLevel_MEDIUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1RootStruct_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_RootStruct *arg1 = (crate_RootStruct *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_RootStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1RootStruct_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_RootStruct *arg1 = (crate_RootStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_RootStruct **)&jarg1; 
  result = (char *) ((arg1)->name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1RootStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_RootStruct *arg1 = (crate_RootStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_RootStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_VecU8Holder_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_example_mine_VecU8Holder *arg1 = (crate_example_mine_VecU8Holder *) 0 ;
  Vec_u8 *arg2 = (Vec_u8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_VecU8Holder **)&jarg1; 
  
  uint8_t * _buffer_arg2 = (uint8_t*)(jenv)->GetByteArrayElements(jarg2, 0);
  int size_arg2 = (jenv)->GetArrayLength(jarg2);
  uint8_t * byteArray_arg2 = (uint8_t *)memoryFactory.alloc(size_arg2);
  memcpy(byteArray_arg2, _buffer_arg2, size_arg2);
  arg2 = Vec_u8_ctor(byteArray_arg2, size_arg2);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
  if (arg1) (arg1)->first = arg2;
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) _buffer_arg2, 0);
  jenv->ReleaseByteArrayElements(jarg2, (jbyte *) _buffer_arg2, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_VecU8Holder_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_example_mine_VecU8Holder *arg1 = (crate_example_mine_VecU8Holder *) 0 ;
  Vec_u8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_VecU8Holder **)&jarg1; 
  result = (Vec_u8 *) ((arg1)->first);
  {
    printf("typemap(out) Vec_u8* %lx\n", (long)result);
    if (!result) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8* null array");
      return 0;
    }
    if (!result->values) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8.values null array");
      return 0;
    }
    printf("  (count: %ld, values: [%lx], %d)\n", result->count, (long)result->values, result->values[0]);
    jresult = jenv->NewByteArray(result->count);
    jenv->SetByteArrayRegion(jresult, 0, result->count, (jbyte *) result->values);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1VecU8Holder(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  Vec_u8 *arg1 = (Vec_u8 *) 0 ;
  crate_example_mine_VecU8Holder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  uint8_t * _buffer_arg1 = (uint8_t*)(jenv)->GetByteArrayElements(jarg1, 0);
  int size_arg1 = (jenv)->GetArrayLength(jarg1);
  uint8_t * byteArray_arg1 = (uint8_t *)memoryFactory.alloc(size_arg1);
  memcpy(byteArray_arg1, _buffer_arg1, size_arg1);
  arg1 = Vec_u8_ctor(byteArray_arg1, size_arg1);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  result = (crate_example_mine_VecU8Holder *)new_crate_example_mine_VecU8Holder(arg1);
  *(crate_example_mine_VecU8Holder **)&jresult = result; 
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) _buffer_arg1, 0);
  jenv->ReleaseByteArrayElements(jarg1, (jbyte *) _buffer_arg1, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1VecU8Holder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_example_mine_VecU8Holder *arg1 = (crate_example_mine_VecU8Holder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_example_mine_VecU8Holder **)&jarg1; 
  delete_crate_example_mine_VecU8Holder(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_InnerStruct_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_InnerStruct_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  result = (uint64_t) ((arg1)->first);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_InnerStruct_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_InnerStruct_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  result = (uint64_t) ((arg1)->second);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1InnerStruct(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  long arg1 ;
  long arg2 ;
  crate_example_mine_InnerStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  result = (crate_example_mine_InnerStruct *)new_crate_example_mine_InnerStruct(arg1,arg2);
  *(crate_example_mine_InnerStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1InnerStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  delete_crate_example_mine_InnerStruct(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_OuterStruct_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_OuterStruct_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  result = (crate_example_mine_InnerStruct *) ((arg1)->first);
  *(crate_example_mine_InnerStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_OuterStruct_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_OuterStruct_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  result = (crate_example_mine_InnerStruct *) ((arg1)->second);
  *(crate_example_mine_InnerStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1OuterStruct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  crate_example_mine_OuterStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  result = (crate_example_mine_OuterStruct *)new_crate_example_mine_OuterStruct__SWIG_0(arg1,arg2);
  *(crate_example_mine_OuterStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1OuterStruct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  long arg1 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  crate_example_mine_OuterStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  result = (crate_example_mine_OuterStruct *)new_crate_example_mine_OuterStruct__SWIG_1(arg1,arg2,arg3,arg4);
  *(crate_example_mine_OuterStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1OuterStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  delete_crate_example_mine_OuterStruct(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_KeyID_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->_0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_KeyID_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  result = (uint32_t) ((arg1)->_0);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1KeyID(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  crate_identity_identity_KeyID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (crate_identity_identity_KeyID *)new_crate_identity_identity_KeyID(arg1);
  *(crate_identity_identity_KeyID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1KeyID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  delete_crate_identity_identity_KeyID(arg1);
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_KeyID_1toInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  result = (int)crate_identity_identity_KeyID_toInt(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_sdk_exampleJNI_KeyID_1objectEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  crate_identity_identity_KeyID *arg2 = (crate_identity_identity_KeyID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  arg2 = *(crate_identity_identity_KeyID **)&jarg2; 
  result = (bool)crate_identity_identity_KeyID_objectEquals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentifierBytes32_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  uint8_t (*arg2)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    const jsize sz = jenv->GetArrayLength(jarg2);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg2, 0);
    if (!jarr) return ;
    byteArray2 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray2, jarr, sz);
    
    //memcpy(arg2, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg2, jarr, JNI_ABORT);
    arg2 = (uint8_t (*) [32])byteArray2;
  }
  if (arg1) (arg1)->_0 = (uint8_t (*)[32])arg2;
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) *arg2, 0);
    
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_IdentifierBytes32_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  uint8_t (*result)[32] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  result = (uint8_t (*)[32]) ((arg1)->_0);
  {
    jresult = jenv->NewByteArray(32);
    jenv->SetByteArrayRegion(jresult, 0, 32, (jbyte *)(*result));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1IdentifierBytes32(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  uint8_t (*arg1)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray1 ;
  crate_nested_IdentifierBytes32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg1);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg1, 0);
    if (!jarr) return 0;
    byteArray1 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray1, jarr, sz);
    
    //memcpy(arg1, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg1, jarr, JNI_ABORT);
    arg1 = (uint8_t (*) [32])byteArray1;
  }
  result = (crate_nested_IdentifierBytes32 *)new_crate_nested_IdentifierBytes32((unsigned char (*)[32])arg1);
  *(crate_nested_IdentifierBytes32 **)&jresult = result; 
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) *arg1, 0);
    
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1IdentifierBytes32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  delete_crate_nested_IdentifierBytes32(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_Identifier_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_IdentifierBytes32 *arg2 = (crate_nested_IdentifierBytes32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  arg2 = *(crate_nested_IdentifierBytes32 **)&jarg2; 
  if (arg1) (arg1)->_0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_Identifier_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_IdentifierBytes32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_nested_IdentifierBytes32 *) ((arg1)->_0);
  *(crate_nested_IdentifierBytes32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1Identifier(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  uint8_t (*arg1)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray1 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg1);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg1, 0);
    if (!jarr) return 0;
    byteArray1 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray1, jarr, sz);
    
    //memcpy(arg1, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg1, jarr, JNI_ABORT);
    arg1 = (uint8_t (*) [32])byteArray1;
  }
  result = (crate_nested_Identifier *)new_crate_nested_Identifier((unsigned char (*)[32])arg1);
  *(crate_nested_Identifier **)&jresult = result; 
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) *arg1, 0);
    
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1Identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  delete_crate_nested_Identifier(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1identity_1identity_1ContractBounds_1SingleContract_1Body_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_ContractBounds_SingleContract_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContract_Body *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContract_Body **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1identity_1identity_1ContractBounds_1SingleContract_1Body_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_ContractBounds_SingleContract_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContract_Body *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContract_Body **)&jarg1; 
  result = (crate_nested_Identifier *) ((arg1)->id);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1identity_1identity_1ContractBounds_1SingleContract_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_ContractBounds_SingleContract_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContract_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContract_Body **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1identity_1identity_1ContractBounds_1SingleContractDocumentType_1Body_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1identity_1identity_1ContractBounds_1SingleContractDocumentType_1Body_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jarg1; 
  result = (crate_nested_Identifier *) ((arg1)->id);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1identity_1identity_1ContractBounds_1SingleContractDocumentType_1Body_1document_1type_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->document_type_name;
    if (arg2) {
      arg1->document_type_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->document_type_name, (const char *)arg2);
    } else {
      arg1->document_type_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1identity_1identity_1ContractBounds_1SingleContractDocumentType_1Body_1document_1type_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jarg1; 
  result = (char *) ((arg1)->document_type_name);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1identity_1identity_1ContractBounds_1SingleContractDocumentType_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *arg1 = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_ContractBounds_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  enum crate_identity_identity_ContractBounds_Tag arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  arg2 = (enum crate_identity_identity_ContractBounds_Tag)jarg2; 
  if (arg1) (arg1)->tag = arg2;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_ContractBounds_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  enum crate_identity_identity_ContractBounds_Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  result = (enum crate_identity_identity_ContractBounds_Tag) ((arg1)->tag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_ContractBounds_1single_1contract_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  crate_identity_identity_ContractBounds_SingleContract_Body *arg2 = (crate_identity_identity_ContractBounds_SingleContract_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  arg2 = *(crate_identity_identity_ContractBounds_SingleContract_Body **)&jarg2; 
  if (arg1) (arg1)->single_contract = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_ContractBounds_1single_1contract_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  crate_identity_identity_ContractBounds_SingleContract_Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  result = (crate_identity_identity_ContractBounds_SingleContract_Body *)& ((arg1)->single_contract);
  *(crate_identity_identity_ContractBounds_SingleContract_Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_ContractBounds_1single_1contract_1document_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *arg2 = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  arg2 = *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jarg2; 
  if (arg1) (arg1)->single_contract_document_type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_ContractBounds_1single_1contract_1document_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  result = (crate_identity_identity_ContractBounds_SingleContractDocumentType_Body *)& ((arg1)->single_contract_document_type);
  *(crate_identity_identity_ContractBounds_SingleContractDocumentType_Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1ContractBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_identity_identity_ContractBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_identity_identity_ContractBounds *)new_crate_identity_identity_ContractBounds__SWIG_0(arg1);
  *(crate_identity_identity_ContractBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1ContractBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  char *arg2 = (char *) 0 ;
  crate_identity_identity_ContractBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (crate_identity_identity_ContractBounds *)new_crate_identity_identity_ContractBounds__SWIG_1(arg1,arg2);
  *(crate_identity_identity_ContractBounds **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1ContractBounds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  delete_crate_identity_identity_ContractBounds(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_BinaryData_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_nested_BinaryData *arg1 = (crate_nested_BinaryData *) 0 ;
  Vec_u8 *arg2 = (Vec_u8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_BinaryData **)&jarg1; 
  
  uint8_t * _buffer_arg2 = (uint8_t*)(jenv)->GetByteArrayElements(jarg2, 0);
  int size_arg2 = (jenv)->GetArrayLength(jarg2);
  uint8_t * byteArray_arg2 = (uint8_t *)memoryFactory.alloc(size_arg2);
  memcpy(byteArray_arg2, _buffer_arg2, size_arg2);
  arg2 = Vec_u8_ctor(byteArray_arg2, size_arg2);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
  if (arg1) (arg1)->_0 = arg2;
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) _buffer_arg2, 0);
  jenv->ReleaseByteArrayElements(jarg2, (jbyte *) _buffer_arg2, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_BinaryData_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_nested_BinaryData *arg1 = (crate_nested_BinaryData *) 0 ;
  Vec_u8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_BinaryData **)&jarg1; 
  result = (Vec_u8 *) ((arg1)->_0);
  {
    printf("typemap(out) Vec_u8* %lx\n", (long)result);
    if (!result) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8* null array");
      return 0;
    }
    if (!result->values) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8.values null array");
      return 0;
    }
    printf("  (count: %ld, values: [%lx], %d)\n", result->count, (long)result->values, result->values[0]);
    jresult = jenv->NewByteArray(result->count);
    jenv->SetByteArrayRegion(jresult, 0, result->count, (jbyte *) result->values);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1BinaryData(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  Vec_u8 *arg1 = (Vec_u8 *) 0 ;
  crate_nested_BinaryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  uint8_t * _buffer_arg1 = (uint8_t*)(jenv)->GetByteArrayElements(jarg1, 0);
  int size_arg1 = (jenv)->GetArrayLength(jarg1);
  uint8_t * byteArray_arg1 = (uint8_t *)memoryFactory.alloc(size_arg1);
  memcpy(byteArray_arg1, _buffer_arg1, size_arg1);
  arg1 = Vec_u8_ctor(byteArray_arg1, size_arg1);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  result = (crate_nested_BinaryData *)new_crate_nested_BinaryData(arg1);
  *(crate_nested_BinaryData **)&jresult = result; 
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) _buffer_arg1, 0);
  jenv->ReleaseByteArrayElements(jarg1, (jbyte *) _buffer_arg1, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1BinaryData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_BinaryData *arg1 = (crate_nested_BinaryData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_BinaryData **)&jarg1; 
  delete_crate_nested_BinaryData(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1TimestampMillis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  crate_identity_identity_TimestampMillis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_TimestampMillis *)new_crate_identity_identity_TimestampMillis__SWIG_0();
  *(crate_identity_identity_TimestampMillis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1TimestampMillis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  crate_identity_identity_TimestampMillis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  result = (crate_identity_identity_TimestampMillis *)new_crate_identity_identity_TimestampMillis__SWIG_1(arg1);
  *(crate_identity_identity_TimestampMillis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1TimestampMillis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_TimestampMillis *arg1 = (crate_identity_identity_TimestampMillis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_TimestampMillis **)&jarg1; 
  delete_crate_identity_identity_TimestampMillis(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_TimestampMillis_1toLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_TimestampMillis *arg1 = (crate_identity_identity_TimestampMillis *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_TimestampMillis **)&jarg1; 
  result = (long long)crate_identity_identity_TimestampMillis_toLong(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_sdk_exampleJNI_TimestampMillis_1objectEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  crate_identity_identity_TimestampMillis *arg1 = (crate_identity_identity_TimestampMillis *) 0 ;
  crate_identity_identity_TimestampMillis *arg2 = (crate_identity_identity_TimestampMillis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_TimestampMillis **)&jarg1; 
  arg2 = *(crate_identity_identity_TimestampMillis **)&jarg2; 
  result = (bool)crate_identity_identity_TimestampMillis_objectEquals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_KeyID *arg2 = (crate_identity_identity_KeyID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_KeyID **)&jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_KeyID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_KeyID *) ((arg1)->id);
  *(crate_identity_identity_KeyID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1contract_1bounds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_ContractBounds *arg2 = (crate_identity_identity_ContractBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_ContractBounds **)&jarg2; 
  if (arg1) (arg1)->contract_bounds = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1contract_1bounds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_ContractBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_ContractBounds *) ((arg1)->contract_bounds);
  *(crate_identity_identity_ContractBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1read_1only_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->read_only = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1read_1only_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (bool) ((arg1)->read_only);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_nested_BinaryData *arg2 = (crate_nested_BinaryData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_nested_BinaryData **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_nested_BinaryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_nested_BinaryData *) ((arg1)->data);
  *(crate_nested_BinaryData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1disabled_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_TimestampMillis *arg2 = (crate_identity_identity_TimestampMillis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_TimestampMillis **)&jarg2; 
  if (arg1) (arg1)->disabled_at = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1disabled_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_TimestampMillis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_TimestampMillis *) ((arg1)->disabled_at);
  *(crate_identity_identity_TimestampMillis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1IdentityPublicKeyV0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  crate_identity_identity_Purpose arg2 ;
  crate_identity_identity_SecurityLevel arg3 ;
  crate_identity_identity_ContractBounds *arg4 = (crate_identity_identity_ContractBounds *) 0 ;
  crate_identity_identity_KeyType arg5 ;
  bool arg6 ;
  crate_nested_BinaryData *arg7 = (crate_nested_BinaryData *) 0 ;
  crate_identity_identity_TimestampMillis *arg8 = (crate_identity_identity_TimestampMillis *) 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  arg2 = (crate_identity_identity_Purpose)jarg2; 
  arg3 = (crate_identity_identity_SecurityLevel)jarg3; 
  arg4 = *(crate_identity_identity_ContractBounds **)&jarg4; 
  arg5 = (crate_identity_identity_KeyType)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(crate_nested_BinaryData **)&jarg7; 
  arg8 = *(crate_identity_identity_TimestampMillis **)&jarg8; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *)new_crate_identity_identity_IdentityPublicKeyV0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1IdentityPublicKeyV0(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  delete_crate_identity_identity_IdentityPublicKeyV0(arg1);
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1getKeyType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_KeyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (enum crate_identity_identity_KeyType)crate_identity_identity_IdentityPublicKeyV0_getKeyType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1getPurpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_Purpose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (enum crate_identity_identity_Purpose)crate_identity_identity_IdentityPublicKeyV0_getPurpose(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKeyV0_1getSecurityLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_SecurityLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (enum crate_identity_identity_SecurityLevel)crate_identity_identity_IdentityPublicKeyV0_getSecurityLevel(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKey_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_identity_identity_IdentityPublicKey *arg1 = (crate_identity_identity_IdentityPublicKey *) 0 ;
  enum crate_identity_identity_IdentityPublicKey_Tag arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKey **)&jarg1; 
  arg2 = (enum crate_identity_identity_IdentityPublicKey_Tag)jarg2; 
  if (arg1) (arg1)->tag = arg2;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKey_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_IdentityPublicKey *arg1 = (crate_identity_identity_IdentityPublicKey *) 0 ;
  enum crate_identity_identity_IdentityPublicKey_Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKey **)&jarg1; 
  result = (enum crate_identity_identity_IdentityPublicKey_Tag) ((arg1)->tag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKey_1v0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKey *arg1 = (crate_identity_identity_IdentityPublicKey *) 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg2 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKey **)&jarg1; 
  arg2 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg2; 
  if (arg1) (arg1)->v0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityPublicKey_1v0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKey *arg1 = (crate_identity_identity_IdentityPublicKey *) 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKey **)&jarg1; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *) ((arg1)->v0);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1IdentityPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_IdentityPublicKey *arg1 = (crate_identity_identity_IdentityPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_IdentityPublicKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  uintptr_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  arg2 = (uintptr_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  uintptr_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  result = (uintptr_t) ((arg1)->count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey_1keys_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  crate_identity_identity_KeyID **arg2 = (crate_identity_identity_KeyID **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  arg2 = *(crate_identity_identity_KeyID ***)&jarg2; 
  if (arg1) (arg1)->keys = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey_1keys_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  crate_identity_identity_KeyID **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  result = (crate_identity_identity_KeyID **) ((arg1)->keys);
  *(crate_identity_identity_KeyID ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  crate_identity_identity_IdentityPublicKey **arg2 = (crate_identity_identity_IdentityPublicKey **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  arg2 = *(crate_identity_identity_IdentityPublicKey ***)&jarg2; 
  if (arg1) (arg1)->values = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  crate_identity_identity_IdentityPublicKey **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  result = (crate_identity_identity_IdentityPublicKey **) ((arg1)->values);
  *(crate_identity_identity_IdentityPublicKey ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1std_1collections_1Map_1keys_1crate_1identity_1identity_1KeyID_1values_1crate_1identity_1identity_1IdentityPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1Revision_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  crate_identity_identity_Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Revision *)new_crate_identity_identity_Revision__SWIG_0();
  *(crate_identity_identity_Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1Revision_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  crate_identity_identity_Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  result = (crate_identity_identity_Revision *)new_crate_identity_identity_Revision__SWIG_1(arg1);
  *(crate_identity_identity_Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1Revision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_Revision *arg1 = (crate_identity_identity_Revision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_Revision **)&jarg1; 
  delete_crate_identity_identity_Revision(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_Revision_1toLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_Revision *arg1 = (crate_identity_identity_Revision *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Revision **)&jarg1; 
  result = (long long)crate_identity_identity_Revision_toLong(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_sdk_exampleJNI_Revision_1objectEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  crate_identity_identity_Revision *arg1 = (crate_identity_identity_Revision *) 0 ;
  crate_identity_identity_Revision *arg2 = (crate_identity_identity_Revision *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_Revision **)&jarg1; 
  arg2 = *(crate_identity_identity_Revision **)&jarg2; 
  result = (bool)crate_identity_identity_Revision_objectEquals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (crate_nested_Identifier *) ((arg1)->id);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1revision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_identity_identity_Revision *arg2 = (crate_identity_identity_Revision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_Revision **)&jarg2; 
  if (arg1) (arg1)->revision = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1revision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_identity_identity_Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (crate_identity_identity_Revision *) ((arg1)->revision);
  *(crate_identity_identity_Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1IdentityV0(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  delete_crate_identity_identity_IdentityV0(arg1);
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1getPublicKeyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (int)crate_identity_identity_IdentityV0_getPublicKeyCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1getPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  uint32_t arg2 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *)crate_identity_identity_IdentityV0_getPublicKey(arg1,arg2);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1getPublicKeyById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  uint32_t arg2 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *)crate_identity_identity_IdentityV0_getPublicKeyById(arg1,arg2);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_IdentityV0_1getBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (long long)crate_identity_identity_IdentityV0_getBalance(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_Identity_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  enum crate_identity_identity_Identity_Tag arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  arg2 = (enum crate_identity_identity_Identity_Tag)jarg2; 
  if (arg1) (arg1)->tag = arg2;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_Identity_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  enum crate_identity_identity_Identity_Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  result = (enum crate_identity_identity_Identity_Tag) ((arg1)->tag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_Identity_1v0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  crate_identity_identity_IdentityV0 *arg2 = (crate_identity_identity_IdentityV0 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  arg2 = *(crate_identity_identity_IdentityV0 **)&jarg2; 
  if (arg1) (arg1)->v0 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_Identity_1v0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  crate_identity_identity_IdentityV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  result = (crate_identity_identity_IdentityV0 *) ((arg1)->v0);
  *(crate_identity_identity_IdentityV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1Identity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Identity *)new_crate_identity_identity_Identity();
  *(crate_identity_identity_Identity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1Identity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  delete_crate_identity_identity_Identity(arg1);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersion_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->_0 = arg2;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersion_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  result = (uint16_t) ((arg1)->_0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1FeatureVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersionBounds_1min_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  if (arg1) (arg1)->min_version = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersionBounds_1min_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  result = (crate_nested_FeatureVersion *) ((arg1)->min_version);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersionBounds_1max_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  if (arg1) (arg1)->max_version = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersionBounds_1max_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  result = (crate_nested_FeatureVersion *) ((arg1)->max_version);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersionBounds_1default_1current_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  if (arg1) (arg1)->default_current_version = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1FeatureVersionBounds_1default_1current_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  result = (crate_nested_FeatureVersion *) ((arg1)->default_current_version);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1FeatureVersionBounds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1PlatformVersion_1protocol_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->protocol_version = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1PlatformVersion_1protocol_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  result = (uint32_t) ((arg1)->protocol_version);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1PlatformVersion_1identity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *arg2 = (crate_nested_FeatureVersionBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersionBounds **)&jarg2; 
  if (arg1) (arg1)->identity = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1PlatformVersion_1identity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  result = (crate_nested_FeatureVersionBounds *) ((arg1)->identity);
  *(crate_nested_FeatureVersionBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1PlatformVersion_1proofs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *arg2 = (crate_nested_FeatureVersionBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersionBounds **)&jarg2; 
  if (arg1) (arg1)->proofs = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1PlatformVersion_1proofs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  result = (crate_nested_FeatureVersionBounds *) ((arg1)->proofs);
  *(crate_nested_FeatureVersionBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1PlatformVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1DataContractNotPresentError_1data_1contract_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  if (arg1) (arg1)->data_contract_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1DataContractNotPresentError_1data_1contract_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  result = (crate_nested_Identifier *) ((arg1)->data_contract_id);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1DataContractNotPresentError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1StringDecodeError2_1Body_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_nested_ProtocolError_StringDecodeError2_Body *arg1 = (crate_nested_ProtocolError_StringDecodeError2_Body *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->_0;
    if (arg2) {
      arg1->_0 = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_0, (const char *)arg2);
    } else {
      arg1->_0 = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1StringDecodeError2_1Body_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_nested_ProtocolError_StringDecodeError2_Body *arg1 = (crate_nested_ProtocolError_StringDecodeError2_Body *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jarg1; 
  result = (char *) ((arg1)->_0);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1StringDecodeError2_1Body_1_11_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_nested_ProtocolError_StringDecodeError2_Body *arg1 = (crate_nested_ProtocolError_StringDecodeError2_Body *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->_1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1StringDecodeError2_1Body_1_11_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError_StringDecodeError2_Body *arg1 = (crate_nested_ProtocolError_StringDecodeError2_Body *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jarg1; 
  result = (uint32_t) ((arg1)->_1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1ProtocolError_1StringDecodeError2_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_ProtocolError_StringDecodeError2_Body *arg1 = (crate_nested_ProtocolError_StringDecodeError2_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1MaxEncodedBytesReachedError_1Body_1max_1size_1kbytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *arg1 = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *) 0 ;
  uintptr_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jarg1; 
  arg2 = (uintptr_t)jarg2; 
  if (arg1) (arg1)->max_size_kbytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1MaxEncodedBytesReachedError_1Body_1max_1size_1kbytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *arg1 = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *) 0 ;
  uintptr_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jarg1; 
  result = (uintptr_t) ((arg1)->max_size_kbytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1MaxEncodedBytesReachedError_1Body_1size_1hit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *arg1 = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *) 0 ;
  uintptr_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jarg1; 
  arg2 = (uintptr_t)jarg2; 
  if (arg1) (arg1)->size_hit = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1MaxEncodedBytesReachedError_1Body_1size_1hit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *arg1 = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *) 0 ;
  uintptr_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jarg1; 
  result = (uintptr_t) ((arg1)->size_hit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1ProtocolError_1MaxEncodedBytesReachedError_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *arg1 = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body_1method_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->method;
    if (arg2) {
      arg1->method = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->method, (const char *)arg2);
    } else {
      arg1->method = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body_1method_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  result = (char *) ((arg1)->method);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body_1known_1versions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  Vec_crate_nested_FeatureVersion *arg2 = (Vec_crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  arg2 = *(Vec_crate_nested_FeatureVersion **)&jarg2; 
  if (arg1) (arg1)->known_versions = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body_1known_1versions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  Vec_crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  result = (Vec_crate_nested_FeatureVersion *) ((arg1)->known_versions);
  *(Vec_crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body_1received_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  if (arg1) (arg1)->received = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body_1received_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  result = (crate_nested_FeatureVersion *) ((arg1)->received);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1ProtocolError_1UnknownVersionMismatch_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg1 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  enum crate_nested_ProtocolError_Tag arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = (enum crate_nested_ProtocolError_Tag)jarg2; 
  if (arg1) (arg1)->tag = arg2;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  enum crate_nested_ProtocolError_Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (enum crate_nested_ProtocolError_Tag) ((arg1)->tag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1identifier_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->identifier_error;
    if (arg2) {
      arg1->identifier_error = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->identifier_error, (const char *)arg2);
    } else {
      arg1->identifier_error = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1identifier_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (char *) ((arg1)->identifier_error);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1string_1decode_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->string_decode_error;
    if (arg2) {
      arg1->string_decode_error = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->string_decode_error, (const char *)arg2);
    } else {
      arg1->string_decode_error = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1string_1decode_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (char *) ((arg1)->string_decode_error);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1string_1decode_1error2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError_StringDecodeError2_Body *arg2 = (crate_nested_ProtocolError_StringDecodeError2_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jarg2; 
  if (arg1) (arg1)->string_decode_error2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1string_1decode_1error2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError_StringDecodeError2_Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (crate_nested_ProtocolError_StringDecodeError2_Body *)& ((arg1)->string_decode_error2);
  *(crate_nested_ProtocolError_StringDecodeError2_Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1max_1encoded_1bytes_1reached_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *arg2 = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jarg2; 
  if (arg1) (arg1)->max_encoded_bytes_reached_error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1max_1encoded_1bytes_1reached_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body *)& ((arg1)->max_encoded_bytes_reached_error);
  *(crate_nested_ProtocolError_MaxEncodedBytesReachedError_Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1encoding_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->encoding_error;
    if (arg2) {
      arg1->encoding_error = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->encoding_error, (const char *)arg2);
    } else {
      arg1->encoding_error = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1encoding_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (char *) ((arg1)->encoding_error);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1encoding_1error2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->encoding_error2;
    if (arg2) {
      arg1->encoding_error2 = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->encoding_error2, (const char *)arg2);
    } else {
      arg1->encoding_error2 = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1encoding_1error2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (char *) ((arg1)->encoding_error2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1data_1contract_1not_1present_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_DataContractNotPresentError *arg2 = (crate_nested_DataContractNotPresentError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = *(crate_nested_DataContractNotPresentError **)&jarg2; 
  if (arg1) (arg1)->data_contract_not_present_error = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1data_1contract_1not_1present_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_DataContractNotPresentError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (crate_nested_DataContractNotPresentError *) ((arg1)->data_contract_not_present_error);
  *(crate_nested_DataContractNotPresentError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1unknown_1version_1mismatch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *arg2 = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  arg2 = *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jarg2; 
  if (arg1) (arg1)->unknown_version_mismatch = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1ProtocolError_1unknown_1version_1mismatch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError_UnknownVersionMismatch_Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  result = (crate_nested_ProtocolError_UnknownVersionMismatch_Body *)& ((arg1)->unknown_version_mismatch);
  *(crate_nested_ProtocolError_UnknownVersionMismatch_Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1ProtocolError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_Result_1ok_1crate_1identity_1identity_1Identity_1err_1crate_1nested_1ProtocolError_1ok_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *arg1 = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *) 0 ;
  crate_identity_identity_Identity *arg2 = (crate_identity_identity_Identity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jarg1; 
  arg2 = *(crate_identity_identity_Identity **)&jarg2; 
  if (arg1) (arg1)->ok = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_Result_1ok_1crate_1identity_1identity_1Identity_1err_1crate_1nested_1ProtocolError_1ok_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *arg1 = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *) 0 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jarg1; 
  result = (crate_identity_identity_Identity *) ((arg1)->ok);
  *(crate_identity_identity_Identity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_Result_1ok_1crate_1identity_1identity_1Identity_1err_1crate_1nested_1ProtocolError_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *arg1 = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError *arg2 = (crate_nested_ProtocolError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jarg1; 
  arg2 = *(crate_nested_ProtocolError **)&jarg2; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_Result_1ok_1crate_1identity_1identity_1Identity_1err_1crate_1nested_1ProtocolError_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *arg1 = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jarg1; 
  result = (crate_nested_ProtocolError *) ((arg1)->error);
  *(crate_nested_ProtocolError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1Result_1ok_1crate_1identity_1identity_1Identity_1err_1crate_1nested_1ProtocolError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *arg1 = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1HashID_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_nested_HashID *arg1 = (crate_nested_HashID *) 0 ;
  uint8_t (*arg2)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_HashID **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    const jsize sz = jenv->GetArrayLength(jarg2);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg2, 0);
    if (!jarr) return ;
    byteArray2 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray2, jarr, sz);
    
    //memcpy(arg2, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg2, jarr, JNI_ABORT);
    arg2 = (uint8_t (*) [32])byteArray2;
  }
  if (arg1) (arg1)->_0 = (uint8_t (*)[32])arg2;
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) *arg2, 0);
    
  }
  
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1HashID_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_nested_HashID *arg1 = (crate_nested_HashID *) 0 ;
  uint8_t (*result)[32] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_HashID **)&jarg1; 
  result = (uint8_t (*)[32]) ((arg1)->_0);
  {
    jresult = jenv->NewByteArray(32);
    jenv->SetByteArrayRegion(jresult, 0, 32, (jbyte *)(*result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1HashID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_HashID *arg1 = (crate_nested_HashID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_HashID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1OptionalFeatureVersion_1_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_nested_OptionalFeatureVersion *arg1 = (crate_nested_OptionalFeatureVersion *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_OptionalFeatureVersion **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->_0 = arg2;
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_crate_1nested_1OptionalFeatureVersion_1_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_nested_OptionalFeatureVersion *arg1 = (crate_nested_OptionalFeatureVersion *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_OptionalFeatureVersion **)&jarg1; 
  result = (uint16_t) ((arg1)->_0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1crate_1nested_1OptionalFeatureVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  crate_nested_OptionalFeatureVersion *arg1 = (crate_nested_OptionalFeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_OptionalFeatureVersion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateRootStructCtor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  crate_RootStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (crate_RootStruct *)crate_RootStruct_ctor(arg1);
  *(crate_RootStruct **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateRootStructDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_RootStruct *arg1 = (crate_RootStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_RootStruct **)&jarg1; 
  crate_RootStruct_destroy(arg1);
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_crateRootStructGetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  crate_RootStruct *arg1 = (crate_RootStruct *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_RootStruct **)&jarg1; 
  result = (char *)crate_RootStruct_get_name((crate_RootStruct const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateRootStructSetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  crate_RootStruct *arg1 = (crate_RootStruct *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_RootStruct **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  crate_RootStruct_set_name(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineVecU8HolderCtor(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  Vec_u8 *arg1 = (Vec_u8 *) 0 ;
  crate_example_mine_VecU8Holder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  uint8_t * _buffer_arg1 = (uint8_t*)(jenv)->GetByteArrayElements(jarg1, 0);
  int size_arg1 = (jenv)->GetArrayLength(jarg1);
  uint8_t * byteArray_arg1 = (uint8_t *)memoryFactory.alloc(size_arg1);
  memcpy(byteArray_arg1, _buffer_arg1, size_arg1);
  arg1 = Vec_u8_ctor(byteArray_arg1, size_arg1);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  result = (crate_example_mine_VecU8Holder *)crate_example_mine_VecU8Holder_ctor(arg1);
  *(crate_example_mine_VecU8Holder **)&jresult = result; 
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) _buffer_arg1, 0);
  jenv->ReleaseByteArrayElements(jarg1, (jbyte *) _buffer_arg1, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineVecU8HolderDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_example_mine_VecU8Holder *arg1 = (crate_example_mine_VecU8Holder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_VecU8Holder **)&jarg1; 
  crate_example_mine_VecU8Holder_destroy(arg1);
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineVecU8HolderGetFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_example_mine_VecU8Holder *arg1 = (crate_example_mine_VecU8Holder *) 0 ;
  Vec_u8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_VecU8Holder **)&jarg1; 
  result = (Vec_u8 *)crate_example_mine_VecU8Holder_get_first((crate_example_mine_VecU8Holder const *)arg1);
  {
    printf("typemap(out) Vec_u8* %lx\n", (long)result);
    if (!result) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8* null array");
      return 0;
    }
    if (!result->values) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8.values null array");
      return 0;
    }
    printf("  (count: %ld, values: [%lx], %d)\n", result->count, (long)result->values, result->values[0]);
    jresult = jenv->NewByteArray(result->count);
    jenv->SetByteArrayRegion(jresult, 0, result->count, (jbyte *) result->values);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineVecU8HolderSetFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_example_mine_VecU8Holder *arg1 = (crate_example_mine_VecU8Holder *) 0 ;
  Vec_u8 *arg2 = (Vec_u8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_VecU8Holder **)&jarg1; 
  
  uint8_t * _buffer_arg2 = (uint8_t*)(jenv)->GetByteArrayElements(jarg2, 0);
  int size_arg2 = (jenv)->GetArrayLength(jarg2);
  uint8_t * byteArray_arg2 = (uint8_t *)memoryFactory.alloc(size_arg2);
  memcpy(byteArray_arg2, _buffer_arg2, size_arg2);
  arg2 = Vec_u8_ctor(byteArray_arg2, size_arg2);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
  crate_example_mine_VecU8Holder_set_first(arg1,arg2);
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) _buffer_arg2, 0);
  jenv->ReleaseByteArrayElements(jarg2, (jbyte *) _buffer_arg2, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_createOuter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  crate_example_mine_OuterStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  result = (crate_example_mine_OuterStruct *)create_outer(arg1,arg2);
  *(crate_example_mine_OuterStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineOuterStructCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  crate_example_mine_OuterStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  result = (crate_example_mine_OuterStruct *)crate_example_mine_OuterStruct_ctor(arg1,arg2);
  *(crate_example_mine_OuterStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineOuterStructDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  crate_example_mine_OuterStruct_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineOuterStructGetFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  result = (crate_example_mine_InnerStruct *)crate_example_mine_OuterStruct_get_first((crate_example_mine_OuterStruct const *)arg1);
  *(crate_example_mine_InnerStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineOuterStructGetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  result = (crate_example_mine_InnerStruct *)crate_example_mine_OuterStruct_get_second((crate_example_mine_OuterStruct const *)arg1);
  *(crate_example_mine_InnerStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineOuterStructSetFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  crate_example_mine_OuterStruct_set_first(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineOuterStructSetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_example_mine_OuterStruct *arg1 = (crate_example_mine_OuterStruct *) 0 ;
  crate_example_mine_InnerStruct *arg2 = (crate_example_mine_InnerStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_example_mine_OuterStruct **)&jarg1; 
  arg2 = *(crate_example_mine_InnerStruct **)&jarg2; 
  crate_example_mine_OuterStruct_set_second(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineInnerStructCtor(JNIEnv *jenv, jclass jcls, jobject jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  uint64_t arg2 ;
  crate_example_mine_InnerStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (crate_example_mine_InnerStruct *)crate_example_mine_InnerStruct_ctor(arg1,arg2);
  *(crate_example_mine_InnerStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineInnerStructDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  crate_example_mine_InnerStruct_destroy(arg1);
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineInnerStructGetFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  result = (uint64_t)crate_example_mine_InnerStruct_get_first((crate_example_mine_InnerStruct const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineInnerStructGetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  result = (uint64_t)crate_example_mine_InnerStruct_get_second((crate_example_mine_InnerStruct const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineInnerStructSetFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  crate_example_mine_InnerStruct_set_first(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateExampleMineInnerStructSetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_example_mine_InnerStruct *arg1 = (crate_example_mine_InnerStruct *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_example_mine_InnerStruct **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  crate_example_mine_InnerStruct_set_second(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0Ctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_IdentityPublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_IdentityPublicKey *)crate_identity_identity_IdentityPublicKey_V0_ctor(arg1);
  *(crate_identity_identity_IdentityPublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_IdentityPublicKey *arg1 = (crate_identity_identity_IdentityPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKey **)&jarg1; 
  crate_identity_identity_IdentityPublicKey_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0Ctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (crate_identity_identity_Identity *)crate_identity_identity_Identity_V0_ctor(arg1);
  *(crate_identity_identity_Identity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  crate_identity_identity_Identity_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeAUTHENTICATIONCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_Purpose_AUTHENTICATION_ctor();
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeENCRYPTIONCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_Purpose_ENCRYPTION_ctor();
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeDECRYPTIONCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_Purpose_DECRYPTION_ctor();
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeWITHDRAWCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_Purpose_WITHDRAW_ctor();
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeSYSTEMCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_Purpose_SYSTEM_ctor();
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeVOTINGCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_Purpose_VOTING_ctor();
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityPurposeDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  enum crate_identity_identity_Purpose *arg1 = (enum crate_identity_identity_Purpose *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(enum crate_identity_identity_Purpose **)&jarg1; 
  crate_identity_identity_Purpose_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_getIdentityContractBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  result = (crate_identity_identity_Identity *)get_identity_contract_bounds(arg1,arg2);
  *(crate_identity_identity_Identity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentitySecurityLevelMASTERCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_SecurityLevel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_SecurityLevel *)crate_identity_identity_SecurityLevel_MASTER_ctor();
  *(enum crate_identity_identity_SecurityLevel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentitySecurityLevelCRITICALCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_SecurityLevel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_SecurityLevel *)crate_identity_identity_SecurityLevel_CRITICAL_ctor();
  *(enum crate_identity_identity_SecurityLevel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentitySecurityLevelHIGHCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_SecurityLevel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_SecurityLevel *)crate_identity_identity_SecurityLevel_HIGH_ctor();
  *(enum crate_identity_identity_SecurityLevel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentitySecurityLevelMEDIUMCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_SecurityLevel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_SecurityLevel *)crate_identity_identity_SecurityLevel_MEDIUM_ctor();
  *(enum crate_identity_identity_SecurityLevel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentitySecurityLevelDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  enum crate_identity_identity_SecurityLevel *arg1 = (enum crate_identity_identity_SecurityLevel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(enum crate_identity_identity_SecurityLevel **)&jarg1; 
  crate_identity_identity_SecurityLevel_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyTypeECDSASECP256K1Ctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_KeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_KeyType *)crate_identity_identity_KeyType_ECDSA_SECP256K1_ctor();
  *(enum crate_identity_identity_KeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyTypeBLS12381Ctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_KeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_KeyType *)crate_identity_identity_KeyType_BLS12_381_ctor();
  *(enum crate_identity_identity_KeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyTypeECDSAHASH160Ctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_KeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_KeyType *)crate_identity_identity_KeyType_ECDSA_HASH160_ctor();
  *(enum crate_identity_identity_KeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyTypeBIP13SCRIPTHASHCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_KeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_KeyType *)crate_identity_identity_KeyType_BIP13_SCRIPT_HASH_ctor();
  *(enum crate_identity_identity_KeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyTypeEDDSA25519HASH160Ctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  enum crate_identity_identity_KeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (enum crate_identity_identity_KeyType *)crate_identity_identity_KeyType_EDDSA_25519_HASH160_ctor();
  *(enum crate_identity_identity_KeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyTypeDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  enum crate_identity_identity_KeyType *arg1 = (enum crate_identity_identity_KeyType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(enum crate_identity_identity_KeyType **)&jarg1; 
  crate_identity_identity_KeyType_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityTimestampMillisCtor(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  crate_identity_identity_TimestampMillis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (crate_identity_identity_TimestampMillis *)crate_identity_identity_TimestampMillis_ctor(arg1);
  *(crate_identity_identity_TimestampMillis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityTimestampMillisDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_TimestampMillis *arg1 = (crate_identity_identity_TimestampMillis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_TimestampMillis **)&jarg1; 
  crate_identity_identity_TimestampMillis_destroy(arg1);
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityTimestampMillisGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_identity_identity_TimestampMillis *arg1 = (crate_identity_identity_TimestampMillis *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_TimestampMillis **)&jarg1; 
  result = (uint64_t)crate_identity_identity_TimestampMillis_get_0((crate_identity_identity_TimestampMillis const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityTimestampMillisSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_identity_identity_TimestampMillis *arg1 = (crate_identity_identity_TimestampMillis *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_TimestampMillis **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  crate_identity_identity_TimestampMillis_set_0(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityContractBoundsDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_ContractBounds *arg1 = (crate_identity_identity_ContractBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_ContractBounds **)&jarg1; 
  crate_identity_identity_ContractBounds_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0Ctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  enum crate_identity_identity_Purpose *arg2 = (enum crate_identity_identity_Purpose *) 0 ;
  enum crate_identity_identity_SecurityLevel *arg3 = (enum crate_identity_identity_SecurityLevel *) 0 ;
  crate_identity_identity_ContractBounds *arg4 = (crate_identity_identity_ContractBounds *) 0 ;
  enum crate_identity_identity_KeyType *arg5 = (enum crate_identity_identity_KeyType *) 0 ;
  bool arg6 ;
  crate_nested_BinaryData *arg7 = (crate_nested_BinaryData *) 0 ;
  crate_identity_identity_TimestampMillis *arg8 = (crate_identity_identity_TimestampMillis *) 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  arg2 = *(enum crate_identity_identity_Purpose **)&jarg2; 
  arg3 = *(enum crate_identity_identity_SecurityLevel **)&jarg3; 
  arg4 = *(crate_identity_identity_ContractBounds **)&jarg4; 
  arg5 = *(enum crate_identity_identity_KeyType **)&jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(crate_nested_BinaryData **)&jarg7; 
  arg8 = *(crate_identity_identity_TimestampMillis **)&jarg8; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *)crate_identity_identity_IdentityPublicKeyV0_ctor(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  crate_identity_identity_IdentityPublicKeyV0_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_KeyID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_KeyID *)crate_identity_identity_IdentityPublicKeyV0_get_id((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(crate_identity_identity_KeyID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetPurpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_Purpose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (enum crate_identity_identity_Purpose *)crate_identity_identity_IdentityPublicKeyV0_get_purpose((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(enum crate_identity_identity_Purpose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetSecurityLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_SecurityLevel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (enum crate_identity_identity_SecurityLevel *)crate_identity_identity_IdentityPublicKeyV0_get_security_level((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(enum crate_identity_identity_SecurityLevel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetContractBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_ContractBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_ContractBounds *)crate_identity_identity_IdentityPublicKeyV0_get_contract_bounds((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(crate_identity_identity_ContractBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetKeyType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_KeyType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (enum crate_identity_identity_KeyType *)crate_identity_identity_IdentityPublicKeyV0_get_key_type((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(enum crate_identity_identity_KeyType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (bool)crate_identity_identity_IdentityPublicKeyV0_get_read_only((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_nested_BinaryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_nested_BinaryData *)crate_identity_identity_IdentityPublicKeyV0_get_data((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(crate_nested_BinaryData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0GetDisabledAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_TimestampMillis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  result = (crate_identity_identity_TimestampMillis *)crate_identity_identity_IdentityPublicKeyV0_get_disabled_at((crate_identity_identity_IdentityPublicKeyV0 const *)arg1);
  *(crate_identity_identity_TimestampMillis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_KeyID *arg2 = (crate_identity_identity_KeyID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_KeyID **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_id(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetPurpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_Purpose *arg2 = (enum crate_identity_identity_Purpose *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(enum crate_identity_identity_Purpose **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_purpose(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetSecurityLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_SecurityLevel *arg2 = (enum crate_identity_identity_SecurityLevel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(enum crate_identity_identity_SecurityLevel **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_security_level(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetContractBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_ContractBounds *arg2 = (crate_identity_identity_ContractBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_ContractBounds **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_contract_bounds(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetKeyType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  enum crate_identity_identity_KeyType *arg2 = (enum crate_identity_identity_KeyType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(enum crate_identity_identity_KeyType **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_key_type(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  crate_identity_identity_IdentityPublicKeyV0_set_read_only(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_nested_BinaryData *arg2 = (crate_nested_BinaryData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_nested_BinaryData **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_data(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityPublicKeyV0SetDisabledAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityPublicKeyV0 *arg1 = (crate_identity_identity_IdentityPublicKeyV0 *) 0 ;
  crate_identity_identity_TimestampMillis *arg2 = (crate_identity_identity_TimestampMillis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityPublicKeyV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_TimestampMillis **)&jarg2; 
  crate_identity_identity_IdentityPublicKeyV0_set_disabled_at(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityRevisionCtor(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  crate_identity_identity_Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (crate_identity_identity_Revision *)crate_identity_identity_Revision_ctor(arg1);
  *(crate_identity_identity_Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityRevisionDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_Revision *arg1 = (crate_identity_identity_Revision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Revision **)&jarg1; 
  crate_identity_identity_Revision_destroy(arg1);
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityRevisionGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_identity_identity_Revision *arg1 = (crate_identity_identity_Revision *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Revision **)&jarg1; 
  result = (uint64_t)crate_identity_identity_Revision_get_0((crate_identity_identity_Revision const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityRevisionSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_identity_identity_Revision *arg1 = (crate_identity_identity_Revision *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Revision **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  crate_identity_identity_Revision_set_0(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0Ctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg2 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  uint64_t arg3 ;
  crate_identity_identity_Revision *arg4 = (crate_identity_identity_Revision *) 0 ;
  crate_identity_identity_IdentityV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  arg2 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(crate_identity_identity_Revision **)&jarg4; 
  result = (crate_identity_identity_IdentityV0 *)crate_identity_identity_IdentityV0_ctor(arg1,arg2,arg3,arg4);
  *(crate_identity_identity_IdentityV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  crate_identity_identity_IdentityV0_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0GetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (crate_nested_Identifier *)crate_identity_identity_IdentityV0_get_id((crate_identity_identity_IdentityV0 const *)arg1);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0GetPublicKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *)crate_identity_identity_IdentityV0_get_public_keys((crate_identity_identity_IdentityV0 const *)arg1);
  *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0GetBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (uint64_t)crate_identity_identity_IdentityV0_get_balance((crate_identity_identity_IdentityV0 const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0GetRevision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_identity_identity_Revision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  result = (crate_identity_identity_Revision *)crate_identity_identity_IdentityV0_get_revision((crate_identity_identity_IdentityV0 const *)arg1);
  *(crate_identity_identity_Revision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0SetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  crate_identity_identity_IdentityV0_set_id(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0SetPublicKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg2 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg2; 
  crate_identity_identity_IdentityV0_set_public_keys(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0SetBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  crate_identity_identity_IdentityV0_set_balance(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityIdentityV0SetRevision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_identity_identity_IdentityV0 *arg1 = (crate_identity_identity_IdentityV0 *) 0 ;
  crate_identity_identity_Revision *arg2 = (crate_identity_identity_Revision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_IdentityV0 **)&jarg1; 
  arg2 = *(crate_identity_identity_Revision **)&jarg2; 
  crate_identity_identity_IdentityV0_set_revision(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_randomKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *)random_key(arg1);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_randomKeyArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  crate_identity_identity_TimestampMillis *arg3 = (crate_identity_identity_TimestampMillis *) 0 ;
  crate_identity_identity_IdentityPublicKeyV0 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  arg3 = *(crate_identity_identity_TimestampMillis **)&jarg3; 
  result = (crate_identity_identity_IdentityPublicKeyV0 *)random_key_args(arg1,arg2,arg3);
  *(crate_identity_identity_IdentityPublicKeyV0 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyIDCtor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  crate_identity_identity_KeyID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  result = (crate_identity_identity_KeyID *)crate_identity_identity_KeyID_ctor(arg1);
  *(crate_identity_identity_KeyID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyIDDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  crate_identity_identity_KeyID_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyIDGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  result = (uint32_t)crate_identity_identity_KeyID_get_0((crate_identity_identity_KeyID const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateIdentityIdentityKeyIDSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_identity_identity_KeyID *arg1 = (crate_identity_identity_KeyID *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_KeyID **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  crate_identity_identity_KeyID_set_0(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_getIdentity2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_identity_identity_Identity *)get_identity2(arg1);
  *(crate_identity_identity_Identity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_getAnIdentity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (crate_identity_identity_Identity *)get_an_identity();
  *(crate_identity_identity_Identity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_createPlatformV0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersionBounds *arg2 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_PlatformVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersionBounds **)&jarg2; 
  result = (crate_nested_PlatformVersion *)create_platform_v0(arg1,arg2);
  *(crate_nested_PlatformVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_createBasicIdentity(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  uint8_t (*arg1)[32] = (uint8_t (*)[32]) 0 ;
  crate_nested_PlatformVersion *arg2 = (crate_nested_PlatformVersion *) 0 ;
  uint8_t *byteArray1 ;
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg1);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg1, 0);
    if (!jarr) return 0;
    byteArray1 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray1, jarr, sz);
    
    //memcpy(arg1, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg1, jarr, JNI_ABORT);
    arg1 = (uint8_t (*) [32])byteArray1;
  }
  arg2 = *(crate_nested_PlatformVersion **)&jarg2; 
  result = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *)create_basic_identity((unsigned char (*)[32])arg1,arg2);
  *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jresult = result; 
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) *arg1, 0);
    
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_createBasicIdentityV0(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  uint8_t (*arg1)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray1 ;
  crate_identity_identity_Identity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg1);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg1, 0);
    if (!jarr) return 0;
    byteArray1 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray1, jarr, sz);
    
    //memcpy(arg1, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg1, jarr, JNI_ABORT);
    arg1 = (uint8_t (*) [32])byteArray1;
  }
  result = (crate_identity_identity_Identity *)create_basic_identity_v0((unsigned char (*)[32])arg1);
  *(crate_identity_identity_Identity **)&jresult = result; 
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) *arg1, 0);
    
  }
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_dash_sdk_exampleJNI_getBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  result = (uint64_t)get_balance(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionCtor(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  result = (crate_nested_FeatureVersion *)crate_nested_FeatureVersion_ctor(arg1);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  crate_nested_FeatureVersion_destroy(arg1);
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  result = (uint16_t)crate_nested_FeatureVersion_get_0((crate_nested_FeatureVersion const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  crate_nested_FeatureVersion_set_0(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersion *arg1 = (crate_nested_FeatureVersion *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  crate_nested_FeatureVersion *arg3 = (crate_nested_FeatureVersion *) 0 ;
  crate_nested_FeatureVersionBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(crate_nested_FeatureVersion **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  arg3 = *(crate_nested_FeatureVersion **)&jarg3; 
  result = (crate_nested_FeatureVersionBounds *)crate_nested_FeatureVersionBounds_ctor(arg1,arg2,arg3);
  *(crate_nested_FeatureVersionBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  crate_nested_FeatureVersionBounds_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsGetMinVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  result = (crate_nested_FeatureVersion *)crate_nested_FeatureVersionBounds_get_min_version((crate_nested_FeatureVersionBounds const *)arg1);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsGetMaxVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  result = (crate_nested_FeatureVersion *)crate_nested_FeatureVersionBounds_get_max_version((crate_nested_FeatureVersionBounds const *)arg1);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsGetDefaultCurrentVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  result = (crate_nested_FeatureVersion *)crate_nested_FeatureVersionBounds_get_default_current_version((crate_nested_FeatureVersionBounds const *)arg1);
  *(crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsSetMinVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  crate_nested_FeatureVersionBounds_set_min_version(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsSetMaxVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  crate_nested_FeatureVersionBounds_set_max_version(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedFeatureVersionBoundsSetDefaultCurrentVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_FeatureVersionBounds *arg1 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersion *arg2 = (crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_FeatureVersionBounds **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersion **)&jarg2; 
  crate_nested_FeatureVersionBounds_set_default_current_version(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedHashIDCtor(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  uint8_t (*arg1)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray1 ;
  crate_nested_HashID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg1);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg1, 0);
    if (!jarr) return 0;
    byteArray1 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray1, jarr, sz);
    
    //memcpy(arg1, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg1, jarr, JNI_ABORT);
    arg1 = (uint8_t (*) [32])byteArray1;
  }
  result = (crate_nested_HashID *)crate_nested_HashID_ctor((unsigned char (*)[32])arg1);
  *(crate_nested_HashID **)&jresult = result; 
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) *arg1, 0);
    
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedHashIDDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_HashID *arg1 = (crate_nested_HashID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_HashID **)&jarg1; 
  crate_nested_HashID_destroy(arg1);
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_crateNestedHashIDGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_nested_HashID *arg1 = (crate_nested_HashID *) 0 ;
  uint8_t (*result)[32] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_HashID **)&jarg1; 
  result = (uint8_t (*)[32])crate_nested_HashID_get_0((crate_nested_HashID const *)arg1);
  {
    jresult = jenv->NewByteArray(32);
    jenv->SetByteArrayRegion(jresult, 0, 32, (jbyte *)(*result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedHashIDSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_nested_HashID *arg1 = (crate_nested_HashID *) 0 ;
  uint8_t (*arg2)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_HashID **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    const jsize sz = jenv->GetArrayLength(jarg2);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg2, 0);
    if (!jarr) return ;
    byteArray2 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray2, jarr, sz);
    
    //memcpy(arg2, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg2, jarr, JNI_ABORT);
    arg2 = (uint8_t (*) [32])byteArray2;
  }
  crate_nested_HashID_set_0(arg1,(unsigned char (*)[32])arg2);
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) *arg2, 0);
    
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierBytes32Ctor(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  uint8_t (*arg1)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray1 ;
  crate_nested_IdentifierBytes32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    const jsize sz = jenv->GetArrayLength(jarg1);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg1, 0);
    if (!jarr) return 0;
    byteArray1 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray1, jarr, sz);
    
    //memcpy(arg1, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg1, jarr, JNI_ABORT);
    arg1 = (uint8_t (*) [32])byteArray1;
  }
  result = (crate_nested_IdentifierBytes32 *)crate_nested_IdentifierBytes32_ctor((unsigned char (*)[32])arg1);
  *(crate_nested_IdentifierBytes32 **)&jresult = result; 
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) *arg1, 0);
    
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierBytes32Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  crate_nested_IdentifierBytes32_destroy(arg1);
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierBytes32Get0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  uint8_t (*result)[32] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  result = (uint8_t (*)[32])crate_nested_IdentifierBytes32_get_0((crate_nested_IdentifierBytes32 const *)arg1);
  {
    jresult = jenv->NewByteArray(32);
    jenv->SetByteArrayRegion(jresult, 0, 32, (jbyte *)(*result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierBytes32Set0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  uint8_t (*arg2)[32] = (uint8_t (*)[32]) 0 ;
  uint8_t *byteArray2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    const jsize sz = jenv->GetArrayLength(jarg2);
    jbyte* const jarr = jenv->GetByteArrayElements(jarg2, 0);
    if (!jarr) return ;
    byteArray2 = (uint8_t *)memoryFactory.alloc(32); // this is a memory leak?
    memcpy(byteArray2, jarr, sz);
    
    //memcpy(arg2, jarr, sz);
    jenv->ReleaseByteArrayElements(jarg2, jarr, JNI_ABORT);
    arg2 = (uint8_t (*) [32])byteArray2;
  }
  crate_nested_IdentifierBytes32_set_0(arg1,(unsigned char (*)[32])arg2);
  {
    //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) *arg2, 0);
    
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorIdentifierErrorCtor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_IdentifierError_ctor(arg1);
  *(crate_nested_ProtocolError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorStringDecodeErrorCtor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_StringDecodeError_ctor(arg1);
  *(crate_nested_ProtocolError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorStringDecodeError2Ctor(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint32_t)jarg2; 
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_StringDecodeError2_ctor(arg1,arg2);
  *(crate_nested_ProtocolError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorEmptyPublicKeyDataErrorCtor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_EmptyPublicKeyDataError_ctor();
  *(crate_nested_ProtocolError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorMaxEncodedBytesReachedErrorCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uintptr_t arg1 ;
  uintptr_t arg2 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uintptr_t)jarg1; 
  arg2 = (uintptr_t)jarg2; 
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_MaxEncodedBytesReachedError_ctor(arg1,arg2);
  *(crate_nested_ProtocolError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorEncodingErrorCtor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_EncodingError_ctor(arg1);
  *(crate_nested_ProtocolError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorEncodingError2Ctor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_EncodingError2_ctor(arg1);
  *(crate_nested_ProtocolError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorDataContractNotPresentErrorCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_DataContractNotPresentError_ctor(arg1);
  *(crate_nested_ProtocolError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorUnknownVersionMismatchCtor(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Vec_crate_nested_FeatureVersion *arg2 = (Vec_crate_nested_FeatureVersion *) 0 ;
  crate_nested_FeatureVersion *arg3 = (crate_nested_FeatureVersion *) 0 ;
  crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(Vec_crate_nested_FeatureVersion **)&jarg2; 
  arg3 = *(crate_nested_FeatureVersion **)&jarg3; 
  result = (crate_nested_ProtocolError *)crate_nested_ProtocolError_UnknownVersionMismatch_ctor(arg1,arg2,arg3);
  *(crate_nested_ProtocolError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedProtocolErrorDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_ProtocolError *arg1 = (crate_nested_ProtocolError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_ProtocolError **)&jarg1; 
  crate_nested_ProtocolError_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedOptionalFeatureVersionCtor(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  crate_nested_OptionalFeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  result = (crate_nested_OptionalFeatureVersion *)crate_nested_OptionalFeatureVersion_ctor(arg1);
  *(crate_nested_OptionalFeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedOptionalFeatureVersionDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_OptionalFeatureVersion *arg1 = (crate_nested_OptionalFeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_OptionalFeatureVersion **)&jarg1; 
  crate_nested_OptionalFeatureVersion_destroy(arg1);
}


SWIGEXPORT jint JNICALL Java_org_dash_sdk_exampleJNI_crateNestedOptionalFeatureVersionGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  crate_nested_OptionalFeatureVersion *arg1 = (crate_nested_OptionalFeatureVersion *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_OptionalFeatureVersion **)&jarg1; 
  result = (uint16_t)crate_nested_OptionalFeatureVersion_get_0((crate_nested_OptionalFeatureVersion const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedOptionalFeatureVersionSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  crate_nested_OptionalFeatureVersion *arg1 = (crate_nested_OptionalFeatureVersion *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_OptionalFeatureVersion **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  crate_nested_OptionalFeatureVersion_set_0(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  crate_nested_FeatureVersionBounds *arg2 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_FeatureVersionBounds *arg3 = (crate_nested_FeatureVersionBounds *) 0 ;
  crate_nested_PlatformVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (uint32_t)jarg1; 
  arg2 = *(crate_nested_FeatureVersionBounds **)&jarg2; 
  arg3 = *(crate_nested_FeatureVersionBounds **)&jarg3; 
  result = (crate_nested_PlatformVersion *)crate_nested_PlatformVersion_ctor(arg1,arg2,arg3);
  *(crate_nested_PlatformVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  crate_nested_PlatformVersion_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionGetProtocolVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  result = (uint32_t)crate_nested_PlatformVersion_get_protocol_version((crate_nested_PlatformVersion const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionGetIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  result = (crate_nested_FeatureVersionBounds *)crate_nested_PlatformVersion_get_identity((crate_nested_PlatformVersion const *)arg1);
  *(crate_nested_FeatureVersionBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionGetProofs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  result = (crate_nested_FeatureVersionBounds *)crate_nested_PlatformVersion_get_proofs((crate_nested_PlatformVersion const *)arg1);
  *(crate_nested_FeatureVersionBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionSetProtocolVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  crate_nested_PlatformVersion_set_protocol_version(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionSetIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *arg2 = (crate_nested_FeatureVersionBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersionBounds **)&jarg2; 
  crate_nested_PlatformVersion_set_identity(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedPlatformVersionSetProofs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_PlatformVersion *arg1 = (crate_nested_PlatformVersion *) 0 ;
  crate_nested_FeatureVersionBounds *arg2 = (crate_nested_FeatureVersionBounds *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_PlatformVersion **)&jarg1; 
  arg2 = *(crate_nested_FeatureVersionBounds **)&jarg2; 
  crate_nested_PlatformVersion_set_proofs(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedBinaryDataCtor(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  Vec_u8 *arg1 = (Vec_u8 *) 0 ;
  crate_nested_BinaryData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  uint8_t * _buffer_arg1 = (uint8_t*)(jenv)->GetByteArrayElements(jarg1, 0);
  int size_arg1 = (jenv)->GetArrayLength(jarg1);
  uint8_t * byteArray_arg1 = (uint8_t *)memoryFactory.alloc(size_arg1);
  memcpy(byteArray_arg1, _buffer_arg1, size_arg1);
  arg1 = Vec_u8_ctor(byteArray_arg1, size_arg1);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  result = (crate_nested_BinaryData *)crate_nested_BinaryData_ctor(arg1);
  *(crate_nested_BinaryData **)&jresult = result; 
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) _buffer_arg1, 0);
  jenv->ReleaseByteArrayElements(jarg1, (jbyte *) _buffer_arg1, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedBinaryDataDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_BinaryData *arg1 = (crate_nested_BinaryData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_BinaryData **)&jarg1; 
  crate_nested_BinaryData_destroy(arg1);
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_crateNestedBinaryDataGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  crate_nested_BinaryData *arg1 = (crate_nested_BinaryData *) 0 ;
  Vec_u8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_BinaryData **)&jarg1; 
  result = (Vec_u8 *)crate_nested_BinaryData_get_0((crate_nested_BinaryData const *)arg1);
  {
    printf("typemap(out) Vec_u8* %lx\n", (long)result);
    if (!result) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8* null array");
      return 0;
    }
    if (!result->values) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8.values null array");
      return 0;
    }
    printf("  (count: %ld, values: [%lx], %d)\n", result->count, (long)result->values, result->values[0]);
    jresult = jenv->NewByteArray(result->count);
    jenv->SetByteArrayRegion(jresult, 0, result->count, (jbyte *) result->values);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedBinaryDataSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  crate_nested_BinaryData *arg1 = (crate_nested_BinaryData *) 0 ;
  Vec_u8 *arg2 = (Vec_u8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_BinaryData **)&jarg1; 
  
  uint8_t * _buffer_arg2 = (uint8_t*)(jenv)->GetByteArrayElements(jarg2, 0);
  int size_arg2 = (jenv)->GetArrayLength(jarg2);
  uint8_t * byteArray_arg2 = (uint8_t *)memoryFactory.alloc(size_arg2);
  memcpy(byteArray_arg2, _buffer_arg2, size_arg2);
  arg2 = Vec_u8_ctor(byteArray_arg2, size_arg2);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
  crate_nested_BinaryData_set_0(arg1,arg2);
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg2, (jbyte *) _buffer_arg2, 0);
  jenv->ReleaseByteArrayElements(jarg2, (jbyte *) _buffer_arg2, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg2->count, (long)arg2->values, arg2->values[0]);
  
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedDataContractNotPresentErrorCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_DataContractNotPresentError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_nested_DataContractNotPresentError *)crate_nested_DataContractNotPresentError_ctor(arg1);
  *(crate_nested_DataContractNotPresentError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedDataContractNotPresentErrorDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  crate_nested_DataContractNotPresentError_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedDataContractNotPresentErrorGetDataContractId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  result = (crate_nested_Identifier *)crate_nested_DataContractNotPresentError_get_data_contract_id((crate_nested_DataContractNotPresentError const *)arg1);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedDataContractNotPresentErrorSetDataContractId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_DataContractNotPresentError *arg1 = (crate_nested_DataContractNotPresentError *) 0 ;
  crate_nested_Identifier *arg2 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_DataContractNotPresentError **)&jarg1; 
  arg2 = *(crate_nested_Identifier **)&jarg2; 
  crate_nested_DataContractNotPresentError_set_data_contract_id(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_IdentifierBytes32 *arg1 = (crate_nested_IdentifierBytes32 *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_IdentifierBytes32 **)&jarg1; 
  result = (crate_nested_Identifier *)crate_nested_Identifier_ctor(arg1);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  crate_nested_Identifier_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierGet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_IdentifierBytes32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_nested_IdentifierBytes32 *)crate_nested_Identifier_get_0((crate_nested_Identifier const *)arg1);
  *(crate_nested_IdentifierBytes32 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_crateNestedIdentifierSet0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_IdentifierBytes32 *arg2 = (crate_nested_IdentifierBytes32 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  arg2 = *(crate_nested_IdentifierBytes32 **)&jarg2; 
  crate_nested_Identifier_set_0(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_stdCollectionsMapKeysCrateIdentityIdentityKeyIDValuesCrateIdentityIdentityIdentityPublicKeyCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  crate_identity_identity_KeyID **arg1 = (crate_identity_identity_KeyID **) 0 ;
  crate_identity_identity_IdentityPublicKey **arg2 = (crate_identity_identity_IdentityPublicKey **) 0 ;
  uintptr_t arg3 ;
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_identity_identity_KeyID ***)&jarg1; 
  arg2 = *(crate_identity_identity_IdentityPublicKey ***)&jarg2; 
  arg3 = (uintptr_t)jarg3; 
  result = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *)std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey_ctor(arg1,arg2,arg3);
  *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_stdCollectionsMapKeysCrateIdentityIdentityKeyIDValuesCrateIdentityIdentityIdentityPublicKeyDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *arg1 = (std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey **)&jarg1; 
  std_collections_Map_keys_crate_identity_identity_KeyID_values_crate_identity_identity_IdentityPublicKey_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_resultOkCrateIdentityIdentityIdentityErrCrateNestedProtocolErrorCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  crate_identity_identity_Identity *arg1 = (crate_identity_identity_Identity *) 0 ;
  crate_nested_ProtocolError *arg2 = (crate_nested_ProtocolError *) 0 ;
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(crate_identity_identity_Identity **)&jarg1; 
  arg2 = *(crate_nested_ProtocolError **)&jarg2; 
  result = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *)Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError_ctor(arg1,arg2);
  *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_resultOkCrateIdentityIdentityIdentityErrCrateNestedProtocolErrorDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *arg1 = (Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError **)&jarg1; 
  Result_ok_crate_identity_identity_Identity_err_crate_nested_ProtocolError_destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_vecCrateNestedFeatureVersionCtor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  crate_nested_FeatureVersion **arg1 = (crate_nested_FeatureVersion **) 0 ;
  uintptr_t arg2 ;
  Vec_crate_nested_FeatureVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(crate_nested_FeatureVersion ***)&jarg1; 
  arg2 = (uintptr_t)jarg2; 
  result = (Vec_crate_nested_FeatureVersion *)Vec_crate_nested_FeatureVersion_ctor(arg1,arg2);
  *(Vec_crate_nested_FeatureVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_vecCrateNestedFeatureVersionDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vec_crate_nested_FeatureVersion *arg1 = (Vec_crate_nested_FeatureVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vec_crate_nested_FeatureVersion **)&jarg1; 
  Vec_crate_nested_FeatureVersion_destroy(arg1);
}


SWIGEXPORT jbyteArray JNICALL Java_org_dash_sdk_exampleJNI_vecU8Ctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jbyteArray jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uintptr_t arg2 ;
  Vec_u8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (uintptr_t)jarg2; 
  result = (Vec_u8 *)Vec_u8_ctor(arg1,arg2);
  {
    printf("typemap(out) Vec_u8* %lx\n", (long)result);
    if (!result) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8* null array");
      return 0;
    }
    if (!result->values) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vec_u8.values null array");
      return 0;
    }
    printf("  (count: %ld, values: [%lx], %d)\n", result->count, (long)result->values, result->values[0]);
    jresult = jenv->NewByteArray(result->count);
    jenv->SetByteArrayRegion(jresult, 0, result->count, (jbyte *) result->values);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_vecU8Destroy(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  Vec_u8 *arg1 = (Vec_u8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  
  uint8_t * _buffer_arg1 = (uint8_t*)(jenv)->GetByteArrayElements(jarg1, 0);
  int size_arg1 = (jenv)->GetArrayLength(jarg1);
  uint8_t * byteArray_arg1 = (uint8_t *)memoryFactory.alloc(size_arg1);
  memcpy(byteArray_arg1, _buffer_arg1, size_arg1);
  arg1 = Vec_u8_ctor(byteArray_arg1, size_arg1);
  printf("typemap(in) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
  Vec_u8_destroy(arg1);
  
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  //JCALL3(ReleaseByteArrayElements, jenv, jarg1, (jbyte *) _buffer_arg1, 0);
  jenv->ReleaseByteArrayElements(jarg1, (jbyte *) _buffer_arg1, 0);
  printf("typemap(argout) Vec_u8 *: %ld, [%lx]%d\n", arg1->count, (long)arg1->values, arg1->values[0]);
  
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemoryFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MemoryFactory *)MemoryFactory::getInstance();
  *(MemoryFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_new_1MemoryFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemoryFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MemoryFactory *)new MemoryFactory();
  *(MemoryFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_delete_1MemoryFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MemoryFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  result = (arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1alloc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  size_t arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (void *)(arg1)->alloc(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->clone(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1alloc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (void *)(arg1)->alloc(arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1destroy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->destroy(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1destroy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->destroy(arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_MemoryFactory_1destroyItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MemoryFactory *arg1 = (MemoryFactory *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->destroyItem(arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_sdk_exampleJNI_memoryFactory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MemoryFactory *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemoryFactory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryFactory & reference is null");
    return ;
  } 
  memoryFactory = *arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_memoryFactory_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemoryFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MemoryFactory *) &(MemoryFactory &)memoryFactory;
  *(MemoryFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_identifierClone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_nested_Identifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_nested_Identifier *)Identifier_clone(arg1);
  *(crate_nested_Identifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_singleContract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  crate_identity_identity_ContractBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  result = (crate_identity_identity_ContractBounds *)singleContract(arg1);
  *(crate_identity_identity_ContractBounds **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_sdk_exampleJNI_singleContractDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  crate_nested_Identifier *arg1 = (crate_nested_Identifier *) 0 ;
  char *arg2 = (char *) 0 ;
  crate_identity_identity_ContractBounds *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(crate_nested_Identifier **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (crate_identity_identity_ContractBounds *)singleContractDocument(arg1,arg2);
  *(crate_identity_identity_ContractBounds **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


#ifdef __cplusplus
}
#endif

